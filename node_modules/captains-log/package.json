{
  "name": "captains-log",
  "version": "1.0.0",
  "description": "Lightweight logger with a simple pass-through configuration for use with fancier logging libraries",
  "main": "index.js",
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha -b"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikermcneil/captains-log.git"
  },
  "keywords": [
    "log",
    "logger",
    "sails",
    "waterline",
    "winston"
  ],
  "author": {
    "name": "Mike McNeil"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikermcneil/captains-log/issues"
  },
  "dependencies": {
    "colors": "0.6.2",
    "lodash": "3.10.1",
    "rc": "0.3.5"
  },
  "devDependencies": {
    "fixture-stdout": "0.2.1",
    "mocha": "3.0.0-2"
  },
  "readme": "# captains-log\n\nLightweight logger with a simple pass-through configuration for use with fancier logging libraries.  Used by the [Sails framework](http://github.com/balderdashy/sails).  Optional support for colorized output, custom prefixes, and log levels (using [npm's logging conventions](https://github.com/isaacs/npmlog#loglevelprefix-message-).)\n\n\n### Installation\n\n```shell\n$ npm install captains-log\n```\n\n### Usage\n\n```javascript\nvar log = require('captains-log')();\n\nlog('hi');\n```\n\n\n##### Logging at a particular level\n\nBy default, if you just call `log()`, captains-log will write your log output at the \"debug\" log level. You can achieve the same effect by writing `log.debug()`.\n\n> IMPORTANT NOTE: npm calls this level `log.http()`, but we call it `debug`.\n> If you use `log()`, the logger sees this as a call to `log.debug()`)\n\nHere are all of the log-level-specific methods which are available in captains-log out of the box:\n\n```javascript\nlog.silly();\n\nlog.verbose();\n\nlog.info();\n\nlog.debug()\n\nlog.warn();\n\nlog.error();\n```\n\n\n\n### Configuring a custom logger\n\nTo use a different library, `overrides.custom` must already be instantiated and ready to go with (at minimum) an n-[ary](http://en.wikipedia.org/wiki/Arity) `.debug()` method.\n\n##### Implementing the simplest possible override\n\n```javascript\nvar log = require('captains-log')({ custom: customLogger });\n\nlog('hello', 'world');\n// yields => \"Hello world\"\n```\n\nThis assumes `customLogger` works as follows:\n\n```javascript\ncustomLogger.debug()\ncustomLogger.debug('blah')\ncustomLogger.debug('blah', 'foo')\ncustomLogger.debug('blah', 'foo', {bar: 'baz'})\ncustomLogger.debug('blah', 'foo', {bar: 'baz'}, ['a', 3], 2, false);\n// etc.\n```\n\nFor example:\n\n```javascript\nvar customLogger = console.log.bind(console);\n```\n\n##### Configure inspect\n\nWhen an object is passed, and inspect is set to true (it is true, by default), you can configure the inner inspect function options, by passing an `inspectOptions` parameter:\n\n```javascript\nvar log = require('captains-log')({inspectOptions: {colors: true, depth: null}});\n\nlog('hello', 'world', {this:'is', a: 'nice', object: new Date()});\n\n```\n\nThe previous code renders the object with colors.\n\n![result](https://cloud.githubusercontent.com/assets/453120/16435457/863c912e-3d6c-11e6-85a4-1c93f4340e2b.png)\n\n\n##### Using Winston\n\nFormerly, this module encapsulated [winston](https://github.com/flatiron/winston), a popular logger by [@indexzero](https://github.com/indexzero) and the gals/guys over at [Nodejitsu](https://www.nodejitsu.com/). Recently, we made Winston optional to make captains-log as lightweight as possible and reduce the number of `npm install`s and `require()`s necessary for its usage in other modules.\n\nBut Winston is awesome!  And it's a great fit for many apps, giving you granular control over how log output is handled, including sending emails, logging to multiple transports, and other production-time concerns.\n\nTo use boot up a captains-log that writes to Winston, do the following:\n\n```javascript\nvar log = require('captains-log')({\n  custom: new (require('winston').Logger)({\n    levels     : ...,\n    transports : ...\n  })\n});\n```\n\n\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mikermcneil/captains-log#readme",
  "_id": "captains-log@1.0.0",
  "_shasum": "a35a25fd131efd866c8eaea06f5802fa99ba6b2c",
  "_resolved": "https://registry.npmjs.org/captains-log/-/captains-log-1.0.0.tgz",
  "_from": "https://registry.npmjs.org/captains-log/-/captains-log-1.0.0.tgz"
}
