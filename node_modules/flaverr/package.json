{
  "name": "flaverr",
  "version": "1.0.0",
  "description": "Flavor an Error instance with the specified error code string or dictionary of customizations.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikermcneil/flaverr.git"
  },
  "keywords": [
    "error",
    "error-handling",
    "stack-trace",
    "error-codes"
  ],
  "author": {
    "name": "Mike McNeil"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "3.10.1"
  },
  "readme": "# flaverr\n\nFlavor an Error instance with the specified error code string or dictionary of customizations.\n\n\n## Installation &nbsp; [![NPM version](https://badge.fury.io/js/flaverr.svg)](http://badge.fury.io/js/flaverr)\n\n```bash\n$ npm install flaverr --save --save-exact\n```\n\n\n## Usage\n\n- If you provide a string as the first argument, that string will be set as the Error's `code`.\n- If you provide a dictionary as the first argument, that dictionary's keys will get folded into the Error as properties.\n\n\n#### Attach an error code\n\n```javascript\nvar flaverr = require('flaverr');\n\nvar err = flaverr('notFound', new Error('Could not find user with the specified id.'));\n// => assert(err.code === 'notFound' && err.message === 'Could not find user with the specified id.')\n// => assert(err.constructor.name === 'Error')\n```\n\n#### Attach arbitrary properties\n\n```javascript\nvar flaverr = require('flaverr');\n\nvar err = flaverr({\n  code: 'notFound',\n  output: { foo: 'bar' }\n}, new Error('Could not find user with the specified id.'));\n// => assert(err.code === 'notFound' && err.message === 'Could not find user with the specified id.')\n// => assert(err.constructor.name === 'Error')\n```\n\n\n## A few examples of common use cases\n\n#### Tagging an error with a code before sending it through an asynchronous callback\n\n```javascript\nif (err) { return done(err); }\nif (!user) {\n  return done(flaverr('notFound', new Error('Could not find a user with that id (`'+req.param('id')+'`).')));\n}\n```\n\n\n#### In a `try` statement\n\n```javascript\ntry {\n  _.each(paths, function (thisPath) {\n    var isDirectory = fs.statFileSync(path.resolve(thisPath)).isDirectory();\n    if (!isDirectory) {\n      throw flaverr('notADirectory', new Error('One of the provided paths (`'+path.resolve(thisPath)+'`) points to something other than a directory.'));\n    }\n  });\n} catch (e) {\n  switch (e.code) {\n    case 'ENOENT': return exits.notFound();\n    case 'notADirectory': return exits.invalidPath(e);\n    default: return exits.error(e);\n  }\n}\n```\n\n#### In an asynchronous loop\n\n```javascript\nasync.eachSeries(userRecords, function (user, next) {\n  \n  if (user.pets.length === 0) {\n    return next(flaverr('noPets', new Error('User (`'+user.id+'`) has no pets yet!')));\n  }\n\n  if (!user.hobby) {\n    return next(flaverr('noHobby', new Error('Consistency violation: User (`'+user.id+'`) has no hobby!')));\n  }\n\n  async.each(user.pets, function (pet, next){\n    Pet.update().where({ id: pet.id })\n    .set({ likelyHobby: user.hobby })\n    .exec(next);\n  }, function (err){\n    if (err) { return next(err); }\n    if (err.code === 'E_UNIQUE') { return next(flaverr('nonUniquePetHobby', err)); }\n    return next();\n  });\n\n}, function afterwards(err) {\n  if (err) {\n    switch (err.code) {\n      case 'noPets': return res.send(409, err.message);\n      case 'noHobby': return res.serverError(err);\n      case 'nonUniquePetHobby': return res.send(409, 'A pet already exists with that hobby.');\n      default: return res.serverError(err);\n    }\n  }//--â€¢\n\n  return res.ok();\n});\n```\n\n\n\n## License\n\nMIT &copy; 2016 Mike McNeil\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mikermcneil/flaverr/issues"
  },
  "homepage": "https://github.com/mikermcneil/flaverr#readme",
  "_id": "flaverr@1.0.0",
  "_shasum": "911283720bd79c4ebfc62b2d3e1797cb6d3bc7c7",
  "_resolved": "https://registry.npmjs.org/flaverr/-/flaverr-1.0.0.tgz",
  "_from": "https://registry.npmjs.org/flaverr/-/flaverr-1.0.0.tgz"
}
